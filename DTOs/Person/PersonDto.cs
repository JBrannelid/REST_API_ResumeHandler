using System.ComponentModel.DataAnnotations;

namespace REST_API_ResumeHandler.DTOs.Person
{
    // Base abstract class DTO with common properties
    // RegEx pattern for phone and email validation
    public abstract class PersonBaseDto
    {
        [Required(ErrorMessage = "A first name is required")]
        [StringLength(50, MinimumLength = 3)]
        public string FirstName { get; set; }

        [Required(ErrorMessage = "A last name is required")]
        [StringLength(50, MinimumLength = 3)]
        public string LastName { get; set; }

        [Required(ErrorMessage = "An email address is required")]
        [RegularExpression(@"^[\w-\.]+@([\w-]+\.)+[\w-]{2,4}$", ErrorMessage = "Please provide a valid email format")]
        [StringLength(100)]
        public string EmailAddress { get; set; }

        // Regex: Validates Swedish phone number format (+46XXXXXXXXX or 0XXXXXXXXX)
        [RegularExpression(@"^(\+46|0)[0-9]{9}$", ErrorMessage = "Please provide a valid mobile number")]
        [StringLength(20)]
        public string? PhoneNumber { get; set; }

        [StringLength(500, MinimumLength = 3)]
        public string? Description { get; set; }
    }

    // Non-abstract class for public responses without IDs
    public class PersonPublicDto
    {
        public string FirstName { get; set; }
        public string LastName { get; set; }
        public string EmailAddress { get; set; }
        public string? PhoneNumber { get; set; }
    }

    // For creating new person - shouldn't include ID
    public class CreatePersonDto : PersonBaseDto
    {
        // No PersonId since it's generated by the database
    }

    // For updating existing person - needs ID for route but not in body
    public class UpdatePersonDto : PersonBaseDto
    {
        // No PersonId here as it should come from the route parameter
    }

    // For responses including ID
    public class PersonResponseDto : PersonBaseDto
    {
        public int PersonId { get; set; }
    }
}